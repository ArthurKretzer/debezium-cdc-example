version: '3.7'
services:
  dbeaver:
    container_name: dbeaver
    image: dbeaver/cloudbeaver:latest
    volumes:
      - dbeaver:/opt/cloudbeaver/workspace
    ports:
      - 8978:8978
    networks:
      - dbz-net

  postgres:
    container_name: postgres
    image: debezium/postgres:15
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
    volumes:
      - ./containers/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data

  db2server:
    container_name: db2server
    image: debezium/db2-cdc
    build:
      context: ./containers/db2
    privileged: True
    ports:
      - 50000:50000
    environment:
      - LICENSE=accept 
      - DBNAME=TESTDB
      - DB2INST1_PASSWORD==Password!
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
    volumes: 
      - db2data:/database

  # Postgres where data from db2 and postgres will be replicated
  postgres-replica:
    container_name: postgres-replica
    image: debezium/postgres:15
    ports:
      - 5433:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
    volumes:
      - ./containers/postgres/init-replica.sql:/docker-entrypoint-initdb.d/init.sql

  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-09-07T02-05-02Z.hotfix.2befe55d4
    hostname: minio
    ports:
      - '19000:9000'
      - '19001:9001'
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net

  # This container only runs once to create the buckets
  createbuckets:
    image: minio/mc:RELEASE.2023-09-07T22-48-55Z
    container_name: createbuckets
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "  /usr/bin/mc --insecure alias set myminio http://minio:9000 minio minio123 && /usr/bin/mc --insecure mb myminio/raw;  "
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net

  # Zookeeper for Kafka
  zookeeper:
    container_name: zookeeper
    image: debezium/zookeeper:2.4
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    ports:
      - "3888:3888"
      - "2888:2888"
      - "2181:2181"
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
  
  kafka:
    container_name: kafka
    image: debezium/kafka:2.4
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_JMX_PORT=9991
    ports:
      - "9092:9092"
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
    depends_on:
      - zookeeper
    restart: on-failure

  apicurio-bd:
    container_name: apicurio-bd
    image: postgres:15.4
    environment:
      POSTGRES_USER: apicurio-registry
      POSTGRES_PASSWORD: password
    ports:
      - 5434:5432
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
  
  # Apicurio for schema registry
  apicurio-registry:
    container_name: apicurio-registry
    image: apicurio/apicurio-registry-sql:2.2.5.Final
    environment:
      REGISTRY_DATASOURCE_URL: 'jdbc:postgresql://apicurio-bd:5432/apicurio-registry'
      REGISTRY_DATASOURCE_USERNAME: apicurio-registry
      REGISTRY_DATASOURCE_PASSWORD: password
    ports:
      - 8080:8080
    depends_on: [zookeeper, kafka, apicurio-bd]
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
    restart: on-failure

  # Kafka connectors
  kafka-connect-sink:
    container_name: kafka-connect-sink
    build:
      context: "./containers/kafka-connector-sink/"
      dockerfile: Dockerfile
      args:
        DEBEZIUM_VERSION: "2.4"
    ports:
      - "8084:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - ENABLE_APICURIO_CONVERTERS=true
      - GROUP_ID=2
      - CONFIG_STORAGE_TOPIC=kafka_connect_sink_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_sink_offsets
      - STATUS_STORAGE_TOPIC=kafka_connect_sink_statuses
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
    depends_on:
      - kafka
    restart: on-failure

  kafka-connect-source:
    container_name: kafka-connect-source
    build:
      context: "./containers/kafka-connector-source/"
      dockerfile: Dockerfile
      args:
        DEBEZIUM_VERSION: "2.4"
    ports:
      - "8085:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - ENABLE_APICURIO_CONVERTERS=true
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka_connect_source_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_source_offsets
      - STATUS_STORAGE_TOPIC=kafka_connect_source_statuses
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net
    depends_on:
      - kafka
    restart: on-failure

  # Fake data generator
  datagen:
    build:
      context: .
      dockerfile: ./containers/datagen/Dockerfile
    entrypoint:
      - python
      - ./gen-fake-data.py
    container_name: datagen
    restart: on-failure
    depends_on:
      - postgres
      - db2server
    logging:                            # allow logging
      options:                          # we use best pactice here as limiting file size and rolling mechanism
        max-size: "10m"                 # File size is 10MB
        max-file: "2"                   # only 2 files created before rolling mechanism applies
      driver: json-file
    networks:
      - dbz-net

volumes:
    minio-data:
    postgres_data:
    pgadmin:
    db2data:
    dbeaver:

networks:
  dbz-net:
    driver: "bridge"